# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_libdelaunator', [dirname(__file__)])
        except ImportError:
            import _libdelaunator
            return _libdelaunator
        if fp is not None:
            try:
                _mod = imp.load_module('_libdelaunator', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _libdelaunator = swig_import_helper()
    del swig_import_helper
else:
    import _libdelaunator
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libdelaunator.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _libdelaunator.SwigPyIterator_value(self)
    def incr(self, n=1): return _libdelaunator.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _libdelaunator.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _libdelaunator.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _libdelaunator.SwigPyIterator_equal(self, *args)
    def copy(self): return _libdelaunator.SwigPyIterator_copy(self)
    def next(self): return _libdelaunator.SwigPyIterator_next(self)
    def __next__(self): return _libdelaunator.SwigPyIterator___next__(self)
    def previous(self): return _libdelaunator.SwigPyIterator_previous(self)
    def advance(self, *args): return _libdelaunator.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _libdelaunator.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _libdelaunator.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _libdelaunator.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _libdelaunator.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _libdelaunator.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _libdelaunator.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _libdelaunator.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

FILE_LOGS = _libdelaunator.FILE_LOGS

def swap(*args):
  return _libdelaunator.swap(*args)
swap = _libdelaunator.swap

def strAfter(*args):
  return _libdelaunator.strAfter(*args)
strAfter = _libdelaunator.strAfter

def randstr(*args):
  return _libdelaunator.randstr(*args)
randstr = _libdelaunator.randstr

def logs(*args):
  return _libdelaunator.logs(*args)
logs = _libdelaunator.logs

def round_float(*args):
  return _libdelaunator.round_float(*args)
round_float = _libdelaunator.round_float
class dual(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, a=0, b=0): 
        this = _libdelaunator.new_dual(a, b)
        try: self.this.append(this)
        except: self.this = this
    def __add__(self, *args): return _libdelaunator.dual___add__(self, *args)
    def __iadd__(self, *args): return _libdelaunator.dual___iadd__(self, *args)
    def __sub__(self, *args): return _libdelaunator.dual___sub__(self, *args)
    def __eq__(self, *args): return _libdelaunator.dual___eq__(self, *args)
    x = _swig_property(_libdelaunator.dual_x_get, _libdelaunator.dual_x_set)
    y = _swig_property(_libdelaunator.dual_y_get, _libdelaunator.dual_y_set)
    __swig_destroy__ = _libdelaunator.delete_dual
    __del__ = lambda self : None;
dual_swigregister = _libdelaunator.dual_swigregister
dual_swigregister(dual)

class percentage(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libdelaunator.new_percentage(*args)
        try: self.this.append(this)
        except: self.this = this
    def of(self, *args): return _libdelaunator.percentage_of(self, *args)
    def value(self): return _libdelaunator.percentage_value(self)
    def __eq__(self, *args): return _libdelaunator.percentage___eq__(self, *args)
    def __add__(self, *args): return _libdelaunator.percentage___add__(self, *args)
    def __sub__(self, *args): return _libdelaunator.percentage___sub__(self, *args)
    __swig_destroy__ = _libdelaunator.delete_percentage
    __del__ = lambda self : None;
percentage_swigregister = _libdelaunator.percentage_swigregister
percentage_swigregister(percentage)

EPSILON = _libdelaunator.EPSILON
class Coordinates(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, x=0., y=0.): 
        this = _libdelaunator.new_Coordinates(x, y)
        try: self.this.append(this)
        except: self.this = this
    def squareDistanceTo(self, *args): return _libdelaunator.Coordinates_squareDistanceTo(self, *args)
    def distanceTo(self, *args): return _libdelaunator.Coordinates_distanceTo(self, *args)
    def x(self): return _libdelaunator.Coordinates_x(self)
    def y(self): return _libdelaunator.Coordinates_y(self)
    def setX(self, *args): return _libdelaunator.Coordinates_setX(self, *args)
    def setY(self, *args): return _libdelaunator.Coordinates_setY(self, *args)
    def setCoord(self, *args): return _libdelaunator.Coordinates_setCoord(self, *args)
    def __eq__(self, *args): return _libdelaunator.Coordinates___eq__(self, *args)
    def __add__(self, *args): return _libdelaunator.Coordinates___add__(self, *args)
    def __iadd__(self, *args): return _libdelaunator.Coordinates___iadd__(self, *args)
    __swig_getmethods__["x"] = x
    __swig_setmethods__["x"] = setX
    __swig_getmethods__["y"] = y
    __swig_setmethods__["y"] = setY
    if _newclass: 
            x = property(x, x)
            y = property(y, y)

    __swig_destroy__ = _libdelaunator.delete_Coordinates
    __del__ = lambda self : None;
Coordinates_swigregister = _libdelaunator.Coordinates_swigregister
Coordinates_swigregister(Coordinates)

class Vertex(Coordinates):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libdelaunator.new_Vertex(*args)
        try: self.this.append(this)
        except: self.this = this
    def neighbourCount(self): return _libdelaunator.Vertex_neighbourCount(self)
    def getID(self): return _libdelaunator.Vertex_getID(self)
    def getEdge(self): return _libdelaunator.Vertex_getEdge(self)
    def setEdge(self, *args): return _libdelaunator.Vertex_setEdge(self, *args)
    def __eq__(self, *args): return _libdelaunator.Vertex___eq__(self, *args)
    __swig_destroy__ = _libdelaunator.delete_Vertex
    __del__ = lambda self : None;
Vertex_swigregister = _libdelaunator.Vertex_swigregister
Vertex_swigregister(Vertex)

class Edge(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, arg2=None, arg3=None, arg4=None, arg5=None, arg6=True): 
        this = _libdelaunator.new_Edge(arg2, arg3, arg4, arg5, arg6)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libdelaunator.delete_Edge
    __del__ = lambda self : None;
    def distanceTo(self, *args): return _libdelaunator.Edge_distanceTo(self, *args)
    def squareDistanceTo(self, *args): return _libdelaunator.Edge_squareDistanceTo(self, *args)
    def coordOnTheStrictRight(self, *args): return _libdelaunator.Edge_coordOnTheStrictRight(self, *args)
    def coordOnTheRight(self, *args): return _libdelaunator.Edge_coordOnTheRight(self, *args)
    def coordOnTheStrictLeft(self, *args): return _libdelaunator.Edge_coordOnTheStrictLeft(self, *args)
    def coordOnTheLeft(self, *args): return _libdelaunator.Edge_coordOnTheLeft(self, *args)
    def originVertex(self): return _libdelaunator.Edge_originVertex(self)
    def destinVertex(self): return _libdelaunator.Edge_destinVertex(self)
    def oppositeEdge(self): return _libdelaunator.Edge_oppositeEdge(self)
    def nextLeftEdge(self): return _libdelaunator.Edge_nextLeftEdge(self)
    def prevLeftEdge(self): return _libdelaunator.Edge_prevLeftEdge(self)
    def nextRightEdge(self): return _libdelaunator.Edge_nextRightEdge(self)
    def prevRightEdge(self): return _libdelaunator.Edge_prevRightEdge(self)
    def rotLeftEdge(self): return _libdelaunator.Edge_rotLeftEdge(self)
    def rotRightEdge(self): return _libdelaunator.Edge_rotRightEdge(self)
    def leftFace(self): return _libdelaunator.Edge_leftFace(self)
    def rightFace(self): return _libdelaunator.Edge_rightFace(self)
    def isVisible(self): return _libdelaunator.Edge_isVisible(self)
    def getID(self): return _libdelaunator.Edge_getID(self)
    def setOriginVertex(self, *args): return _libdelaunator.Edge_setOriginVertex(self, *args)
    def setOppositeEdge(self, *args): return _libdelaunator.Edge_setOppositeEdge(self, *args)
    def setNextLeftEdge(self, *args): return _libdelaunator.Edge_setNextLeftEdge(self, *args)
    def setLeftFace(self, *args): return _libdelaunator.Edge_setLeftFace(self, *args)
    def setVisibility(self, *args): return _libdelaunator.Edge_setVisibility(self, *args)
    passing = _swig_property(_libdelaunator.Edge_passing_get, _libdelaunator.Edge_passing_set)
Edge_swigregister = _libdelaunator.Edge_swigregister
Edge_swigregister(Edge)

class Face(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libdelaunator.new_Face(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libdelaunator.delete_Face
    __del__ = lambda self : None;
    def computeInternalValues(self): return _libdelaunator.Face_computeInternalValues(self)
    def collideAt(self, *args): return _libdelaunator.Face_collideAt(self, *args)
    def circumcircleContainCoords(self, *args): return _libdelaunator.Face_circumcircleContainCoords(self, *args)
    def isVisible(self): return _libdelaunator.Face_isVisible(self)
    def getEdge(self): return _libdelaunator.Face_getEdge(self)
    def getEdge1(self): return _libdelaunator.Face_getEdge1(self)
    def getEdge2(self): return _libdelaunator.Face_getEdge2(self)
    def getEdge3(self): return _libdelaunator.Face_getEdge3(self)
    def getP1(self): return _libdelaunator.Face_getP1(self)
    def getP2(self): return _libdelaunator.Face_getP2(self)
    def getP3(self): return _libdelaunator.Face_getP3(self)
    def getID(self): return _libdelaunator.Face_getID(self)
    def setEdge(self, *args): return _libdelaunator.Face_setEdge(self, *args)
    def setVisibility(self, *args): return _libdelaunator.Face_setVisibility(self, *args)
Face_swigregister = _libdelaunator.Face_swigregister
Face_swigregister(Face)

class IteratorOnAllVertices(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libdelaunator.new_IteratorOnAllVertices(*args)
        try: self.this.append(this)
        except: self.this = this
    def next(self): return _libdelaunator.IteratorOnAllVertices_next(self)
    def __ne__(self, *args): return _libdelaunator.IteratorOnAllVertices___ne__(self, *args)
    def __ref__(self): return _libdelaunator.IteratorOnAllVertices___ref__(self)
    def begin(self): return _libdelaunator.IteratorOnAllVertices_begin(self)
    def end(self): return _libdelaunator.IteratorOnAllVertices_end(self)
    def getVertices(self): return _libdelaunator.IteratorOnAllVertices_getVertices(self)
    def __getitem__(self, *args): return _libdelaunator.IteratorOnAllVertices___getitem__(self, *args)
    __swig_destroy__ = _libdelaunator.delete_IteratorOnAllVertices
    __del__ = lambda self : None;
IteratorOnAllVertices_swigregister = _libdelaunator.IteratorOnAllVertices_swigregister
IteratorOnAllVertices_swigregister(IteratorOnAllVertices)

class IteratorOnAllVertices_read(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libdelaunator.new_IteratorOnAllVertices_read(*args)
        try: self.this.append(this)
        except: self.this = this
    def next(self): return _libdelaunator.IteratorOnAllVertices_read_next(self)
    def __ne__(self, *args): return _libdelaunator.IteratorOnAllVertices_read___ne__(self, *args)
    def __ref__(self): return _libdelaunator.IteratorOnAllVertices_read___ref__(self)
    def begin(self): return _libdelaunator.IteratorOnAllVertices_read_begin(self)
    def end(self): return _libdelaunator.IteratorOnAllVertices_read_end(self)
    def getVertices(self): return _libdelaunator.IteratorOnAllVertices_read_getVertices(self)
    __swig_destroy__ = _libdelaunator.delete_IteratorOnAllVertices_read
    __del__ = lambda self : None;
IteratorOnAllVertices_read_swigregister = _libdelaunator.IteratorOnAllVertices_read_swigregister
IteratorOnAllVertices_read_swigregister(IteratorOnAllVertices_read)

class IteratorFaceToVertices(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libdelaunator.new_IteratorFaceToVertices(*args)
        try: self.this.append(this)
        except: self.this = this
    def next(self): return _libdelaunator.IteratorFaceToVertices_next(self)
    def __ne__(self, *args): return _libdelaunator.IteratorFaceToVertices___ne__(self, *args)
    def __ref__(self): return _libdelaunator.IteratorFaceToVertices___ref__(self)
    def begin(self): return _libdelaunator.IteratorFaceToVertices_begin(self)
    def end(self): return _libdelaunator.IteratorFaceToVertices_end(self)
    __swig_destroy__ = _libdelaunator.delete_IteratorFaceToVertices
    __del__ = lambda self : None;
IteratorFaceToVertices_swigregister = _libdelaunator.IteratorFaceToVertices_swigregister
IteratorFaceToVertices_swigregister(IteratorFaceToVertices)

class IteratorFaceToEdges(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libdelaunator.new_IteratorFaceToEdges(*args)
        try: self.this.append(this)
        except: self.this = this
    def next(self): return _libdelaunator.IteratorFaceToEdges_next(self)
    def __ne__(self, *args): return _libdelaunator.IteratorFaceToEdges___ne__(self, *args)
    def __ref__(self): return _libdelaunator.IteratorFaceToEdges___ref__(self)
    def begin(self): return _libdelaunator.IteratorFaceToEdges_begin(self)
    def end(self): return _libdelaunator.IteratorFaceToEdges_end(self)
    __swig_destroy__ = _libdelaunator.delete_IteratorFaceToEdges
    __del__ = lambda self : None;
IteratorFaceToEdges_swigregister = _libdelaunator.IteratorFaceToEdges_swigregister
IteratorFaceToEdges_swigregister(IteratorFaceToEdges)

class IteratorVertexToNeighbourVertices(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libdelaunator.new_IteratorVertexToNeighbourVertices(*args)
        try: self.this.append(this)
        except: self.this = this
    def next(self): return _libdelaunator.IteratorVertexToNeighbourVertices_next(self)
    def __ne__(self, *args): return _libdelaunator.IteratorVertexToNeighbourVertices___ne__(self, *args)
    def __eq__(self, *args): return _libdelaunator.IteratorVertexToNeighbourVertices___eq__(self, *args)
    def __ref__(self): return _libdelaunator.IteratorVertexToNeighbourVertices___ref__(self)
    def end(self): return _libdelaunator.IteratorVertexToNeighbourVertices_end(self)
    def getItem(self): return _libdelaunator.IteratorVertexToNeighbourVertices_getItem(self)
    def __getitem__(self, *args): return _libdelaunator.IteratorVertexToNeighbourVertices___getitem__(self, *args)
    __swig_destroy__ = _libdelaunator.delete_IteratorVertexToNeighbourVertices
    __del__ = lambda self : None;
IteratorVertexToNeighbourVertices_swigregister = _libdelaunator.IteratorVertexToNeighbourVertices_swigregister
IteratorVertexToNeighbourVertices_swigregister(IteratorVertexToNeighbourVertices)

class IteratorVertexToNeighbourEdges(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libdelaunator.new_IteratorVertexToNeighbourEdges(*args)
        try: self.this.append(this)
        except: self.this = this
    def next(self): return _libdelaunator.IteratorVertexToNeighbourEdges_next(self)
    def __ne__(self, *args): return _libdelaunator.IteratorVertexToNeighbourEdges___ne__(self, *args)
    def __eq__(self, *args): return _libdelaunator.IteratorVertexToNeighbourEdges___eq__(self, *args)
    def __ref__(self): return _libdelaunator.IteratorVertexToNeighbourEdges___ref__(self)
    def end(self): return _libdelaunator.IteratorVertexToNeighbourEdges_end(self)
    def getItem(self): return _libdelaunator.IteratorVertexToNeighbourEdges_getItem(self)
    def __getitem__(self, *args): return _libdelaunator.IteratorVertexToNeighbourEdges___getitem__(self, *args)
    __swig_destroy__ = _libdelaunator.delete_IteratorVertexToNeighbourEdges
    __del__ = lambda self : None;
IteratorVertexToNeighbourEdges_swigregister = _libdelaunator.IteratorVertexToNeighbourEdges_swigregister
IteratorVertexToNeighbourEdges_swigregister(IteratorVertexToNeighbourEdges)

class IteratorOnAllFaces(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libdelaunator.new_IteratorOnAllFaces(*args)
        try: self.this.append(this)
        except: self.this = this
    def next(self): return _libdelaunator.IteratorOnAllFaces_next(self)
    def __ne__(self, *args): return _libdelaunator.IteratorOnAllFaces___ne__(self, *args)
    def __ref__(self): return _libdelaunator.IteratorOnAllFaces___ref__(self)
    def begin(self): return _libdelaunator.IteratorOnAllFaces_begin(self)
    def end(self): return _libdelaunator.IteratorOnAllFaces_end(self)
    def getFaces(self): return _libdelaunator.IteratorOnAllFaces_getFaces(self)
    def __getitem__(self, *args): return _libdelaunator.IteratorOnAllFaces___getitem__(self, *args)
    __swig_destroy__ = _libdelaunator.delete_IteratorOnAllFaces
    __del__ = lambda self : None;
IteratorOnAllFaces_swigregister = _libdelaunator.IteratorOnAllFaces_swigregister
IteratorOnAllFaces_swigregister(IteratorOnAllFaces)

class IteratorOnAllFaces_read(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libdelaunator.new_IteratorOnAllFaces_read(*args)
        try: self.this.append(this)
        except: self.this = this
    def next(self): return _libdelaunator.IteratorOnAllFaces_read_next(self)
    def __ne__(self, *args): return _libdelaunator.IteratorOnAllFaces_read___ne__(self, *args)
    def __ref__(self): return _libdelaunator.IteratorOnAllFaces_read___ref__(self)
    def begin(self): return _libdelaunator.IteratorOnAllFaces_read_begin(self)
    def end(self): return _libdelaunator.IteratorOnAllFaces_read_end(self)
    def getFaces(self): return _libdelaunator.IteratorOnAllFaces_read_getFaces(self)
    __swig_destroy__ = _libdelaunator.delete_IteratorOnAllFaces_read
    __del__ = lambda self : None;
IteratorOnAllFaces_read_swigregister = _libdelaunator.IteratorOnAllFaces_read_swigregister
IteratorOnAllFaces_read_swigregister(IteratorOnAllFaces_read)

class IteratorFaceToNeighbourFaces(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libdelaunator.new_IteratorFaceToNeighbourFaces(*args)
        try: self.this.append(this)
        except: self.this = this
    def next(self): return _libdelaunator.IteratorFaceToNeighbourFaces_next(self)
    def __getitem__(self, *args): return _libdelaunator.IteratorFaceToNeighbourFaces___getitem__(self, *args)
    __swig_destroy__ = _libdelaunator.delete_IteratorFaceToNeighbourFaces
    __del__ = lambda self : None;
IteratorFaceToNeighbourFaces_swigregister = _libdelaunator.IteratorFaceToNeighbourFaces_swigregister
IteratorFaceToNeighbourFaces_swigregister(IteratorFaceToNeighbourFaces)

class IteratorOnAllEdges(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libdelaunator.new_IteratorOnAllEdges(*args)
        try: self.this.append(this)
        except: self.this = this
    def next(self): return _libdelaunator.IteratorOnAllEdges_next(self)
    def __ne__(self, *args): return _libdelaunator.IteratorOnAllEdges___ne__(self, *args)
    def __ref__(self): return _libdelaunator.IteratorOnAllEdges___ref__(self)
    def begin(self): return _libdelaunator.IteratorOnAllEdges_begin(self)
    def end(self): return _libdelaunator.IteratorOnAllEdges_end(self)
    def getEdges(self): return _libdelaunator.IteratorOnAllEdges_getEdges(self)
    def __getitem__(self, *args): return _libdelaunator.IteratorOnAllEdges___getitem__(self, *args)
    __swig_destroy__ = _libdelaunator.delete_IteratorOnAllEdges
    __del__ = lambda self : None;
IteratorOnAllEdges_swigregister = _libdelaunator.IteratorOnAllEdges_swigregister
IteratorOnAllEdges_swigregister(IteratorOnAllEdges)

class IteratorOnAllEdges_read(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libdelaunator.new_IteratorOnAllEdges_read(*args)
        try: self.this.append(this)
        except: self.this = this
    def next(self): return _libdelaunator.IteratorOnAllEdges_read_next(self)
    def __ne__(self, *args): return _libdelaunator.IteratorOnAllEdges_read___ne__(self, *args)
    def __ref__(self): return _libdelaunator.IteratorOnAllEdges_read___ref__(self)
    def begin(self): return _libdelaunator.IteratorOnAllEdges_read_begin(self)
    def end(self): return _libdelaunator.IteratorOnAllEdges_read_end(self)
    def getEdges(self): return _libdelaunator.IteratorOnAllEdges_read_getEdges(self)
    __swig_destroy__ = _libdelaunator.delete_IteratorOnAllEdges_read
    __del__ = lambda self : None;
IteratorOnAllEdges_read_swigregister = _libdelaunator.IteratorOnAllEdges_read_swigregister
IteratorOnAllEdges_read_swigregister(IteratorOnAllEdges_read)

DELAUNAY_CONDITION = _libdelaunator.DELAUNAY_CONDITION
class Delaunator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libdelaunator.new_Delaunator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libdelaunator.delete_Delaunator
    __del__ = lambda self : None;
    def addVertexAt(self, *args): return _libdelaunator.Delaunator_addVertexAt(self, *args)
    def vertexAt(self, *args): return _libdelaunator.Delaunator_vertexAt(self, *args)
    def moveVertex(self, *args): return _libdelaunator.Delaunator_moveVertex(self, *args)
    def collideAt(self, *args): return _libdelaunator.Delaunator_collideAt(self, *args)
    def getEdges(self): return _libdelaunator.Delaunator_getEdges(self)
    def getXmin(self): return _libdelaunator.Delaunator_getXmin(self)
    def getXmax(self): return _libdelaunator.Delaunator_getXmax(self)
    def getYmin(self): return _libdelaunator.Delaunator_getYmin(self)
    def getYmax(self): return _libdelaunator.Delaunator_getYmax(self)
    def getVerticeCount(self): return _libdelaunator.Delaunator_getVerticeCount(self)
    def epsilon(self): return _libdelaunator.Delaunator_epsilon(self)
    def opt_follow_search(self): return _libdelaunator.Delaunator_opt_follow_search(self)
    def getNeighbors(self, *args): return _libdelaunator.Delaunator_getNeighbors(self, *args)
    def allEdges(self): return _libdelaunator.Delaunator_allEdges(self)
    def allEdges_read(self): return _libdelaunator.Delaunator_allEdges_read(self)
    def allFaces(self): return _libdelaunator.Delaunator_allFaces(self)
    def allFaces_read(self): return _libdelaunator.Delaunator_allFaces_read(self)
    def allVertices(self): return _libdelaunator.Delaunator_allVertices(self)
    def allVertices_read(self): return _libdelaunator.Delaunator_allVertices_read(self)
Delaunator_swigregister = _libdelaunator.Delaunator_swigregister
Delaunator_swigregister(Delaunator)



